"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
const command_1 = require("../command");
const projectUtils_1 = require("../projectUtils");
const gcp = require("../gcp/frameworks");
const error_1 = require("../error");
const logger_1 = require("../logger");
const Table = require("cli-table");
const COLUMN_LENGTH = 20;
const TABLE_HEAD = [
    "Backend Id",
    "Repository Name",
    "Location",
    "URL",
    "Created Date",
    "Updated Date",
];
exports.command = new command_1.Command("backends:get")
    .description("Get backend details of a Firebase project")
    .option("-l, --location <location>", "App Backend location", "-")
    .option("-b, --backend <backend>", "Backend Id", "")
    .action(async (options) => {
    const projectId = (0, projectUtils_1.needProjectId)(options);
    const location = options.location;
    const backendId = options.backend;
    if (!backendId) {
        throw new error_1.FirebaseError("Backend id can't be empty.");
    }
    let backendsList = [];
    const table = new Table({
        head: TABLE_HEAD,
        style: { head: ["green"] },
    });
    table.colWidths = COLUMN_LENGTH;
    try {
        if (location !== "-") {
            const backendInRegion = await gcp.getBackend(projectId, location, backendId);
            backendsList.push(backendInRegion);
            populateTable(backendInRegion, table);
        }
        else {
            const allBackend = await gcp.listBackends(projectId, location);
            backendsList = allBackend.backends.filter((bkd) => bkd.name.split("/").pop() === backendId);
            backendsList.forEach((bkd) => populateTable(bkd, table));
        }
        if (backendsList.length !== 0) {
            logger_1.logger.info(table.toString());
        }
        else {
            logger_1.logger.info();
            logger_1.logger.info(`There are no backends with id: ${backendId}`);
        }
    }
    catch (err) {
        throw new error_1.FirebaseError(`Failed to get backend: ${backendId}. Please check the parameters you have provided.`, { original: err });
    }
    return backendsList;
});
function populateTable(backend, table) {
    var _a;
    const [location, , backendId] = backend.name.split("/").slice(3, 6);
    const entry = [
        backendId,
        (_a = backend.codebase.repository) === null || _a === void 0 ? void 0 : _a.split("/").pop(),
        location,
        backend.uri,
        backend.createTime,
        backend.updateTime,
    ];
    const newRow = entry.map((name) => {
        const maxCellWidth = COLUMN_LENGTH - 2;
        const chunks = [];
        for (let i = 0; name && i < name.length; i += maxCellWidth) {
            chunks.push(name.substring(i, i + maxCellWidth));
        }
        return chunks.join("\n");
    });
    table.push(newRow);
}
